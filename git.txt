# GIT

### GIT基本命令
* git init                      # 将一个普通文件夹变成git仓库
* git add                       # 将工作路径的修改提交到暂存区(staged)
* git commit                    # 将暂存区的修改，提交到仓库中
* git status                    # 查看当前仓库状态
* git diff HEAD -- xxx.yyy      #本地文件和仓库中的最新版本比较
* git diff                      # 本地文件和暂存区或仓库的文件比较
* git diff --staged             #比较暂存区和仓库代码
git的一些操作：$ mkdir html 创建一个html文件
            $ rm -rf html/轻则影响系统崩溃，重则影响生命不保！m 是 linux 系统下删除文件的命令。-r 代表删除这个下面的一切，f 表示不需要用户确认，直接执行，通常这个命令都是指定文件夹用的，
             比如rm -rf /tmp/ 
             就是删除/tmp/这个文件夹下面的所有东西，
            但是如果后面的文件夹路径没有加，
            rm -rf / 在服务器上也就意味着….
            $ cd html切换路径
           $ ls linux 
           $ dir windows 
            列当前路径有哪些文件

            $ touch 添加文件 linux

            branch 分支 树枝支流。
$ git status
On branch master

No commits yet

Changes to be committed:
  (use "git rm --cached <file>..." to unstage)

        new file:   index.html

Untracked//未跟踪 files:
  (use "git add <file>..." to include in what will be committed)

        git.txt
        html/
Config file location
    --global              use global config file
    --system              use system config file
    --local               use repository config file
    --worktree            use per-worktree config file
    -f, --file <file>     use given config file
    --blob <blob-id>      read config from given blob object

Action
    --get                 get value: name [value-regex]
    --get-all             get all values: key [value-regex]
    --get-regexp          get values for regexp: name-regex [value-regex]
    --get-urlmatch        get value specific for the URL: section[.var] URL
    --replace-all         replace all matching variables: name value [value_regex]
    --add                 add a new variable: name value
    --unset               remove a variable: name [value-regex]
    --unset-all           remove all matches: name [value-regex]
    --rename-section      rename section: old-name new-name
    --remove-section      remove a section: name
    -l, --list            list all
    -e, --edit            open an editor
    --get-color           find the color configured: slot [default]
    --get-colorbool       find the color setting: slot [stdout-is-tty]

Type
    -t, --type <>         value is given this type
    --bool                value is "true" or "false"
    --int                 value is decimal number
    --bool-or-int         value is --bool or --int
    --path                value is a path (file or directory name)
    --expiry-date         value is an expiry date

Other
    -z, --null            terminate values with NUL byte
    --name-only           show variable names only
    --includes            respect include directives on lookup
    --show-origin         show origin of config (file, standard input, blob, command line)
    --default <value>     with --get, use default value when missing entry








### GIT版本
在Git中，用HEAD表示当前版本，上一个版本就是HEAD^，上上一个版本就是HEAD^^，
当然往上100个版本写100个^比较容易数不过来，所以写成HEAD~100

* git log                                       #查看提交信息
* git reset --hard HEAD^（工作区回退到指定版本）
* git reflog
* git checkout -- filename (让这个文件回到最近一次git commit或git add时的状态)
    注意：有--，才会复原文件，否则，checkout就是切换分支的命令
* git reset HEAD filename （撤销暂存区内容）


### GIT分支
* 默认分支master
* 创建分支
```bash
$ git branch dev
```
* 切换分支
```bash
$ git checkout dev
```
> 创建并切换分支(git checkout -b feature1)

* 查看当前分支
```bash
$ git branch
```

* 合并分支
```bash
$ git merge dev
```
> git merge命令用于合并指定分支到当前分支

* 删除分支
```bash
$ git branch -d dev
```



### 远程仓库
* 添加远程仓库
```bash
$ git remote add origin(远程仓库名) git@github.com:michaelliao/learngit.git
```

* 将本地库内容推送到远程仓库
```bash
$ git push -u origin master
```
> 由于远程库是空的，我们第一次推送master分支时，加上了-u参数，Git不但会把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起来

* 从远程参考clone代码
```bash
$ git clone git@github.com:michaelliao/gitskills.git
```

### 其他命令
gitignore


### GITHUB SSH Key
* 1. 创建SSH Key
> 打开Shell（Windows下打开Git Bash），创建SSH Key：
```bash
$ ssh-keygen -t rsa -C "youremail@example.com"
```
> 你需要把邮件地址换成你自己的邮件地址，然后一路回车，使用默认值即可，由于这个Key也不是用于军事目的，所以也无需设置密码。
* 2. 设定github
> 登陆GitHub，打开“Account settings”，“SSH Keys”页面：
> 然后，点“Add SSH Key”，填上任意Title，在Key文本框里粘贴id_rsa.pub文件的内容：
> 点“Add Key”，你就应该看到已经添加的Key